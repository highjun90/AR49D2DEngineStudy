 [ 배치 파일 설정 ]

 - 개요
 - batch file은 MS-DOS 명령어를 치는 것이 어려운 사람들을 위해 명령어를 한번에 적어놓고
   실행하게 할 수 있게한 명령어 스크립트 이다.
 - bat 파일은 ms-dos와 window 9x 환경에서 실행되고 cmd 파일은 window NT 환경에서만 실행
   되는 파일 이므로 완전히 같은 것이 아니다. 허나 여전히 window 10 같은 운영체제에서도
   bat파일이 잘 작동되는 경우가 많아서 전문가처럼 확실한 차이점을 알고 쓰는게 아니면
   문제가 발생할 수도 있다는걸 인지하고 있어야한다.
 - 서버분야에서 DB관리와 백업등에 폭넓고 강력한 활용도를 가진다.

 - xcopy 명령어
  - 하위 디렉터리를 포함, 파일 및 디렉터리를 복사한다.
  - 옵션
   - /s
     디렉터리 및 하위 디렉터리가 비어있지 않으면 복사. /s를 생략하면 단일 디렉터리 내에서만 작동.
   - /y
     기존 대상 파일을 덮어쓸 것인지 확인하는 메세지를 표시 안하게한다.
   - /exclude:예외리스트.txt
     "예외리스트.txt" 라는파일에 명시된 파일들은 xcopy 대상에서 제외시킨다.
     AR49 엔진에선 "예외리스트.txt"이 exclude_list.txt 파일에 대응함

  - xcopy 명령어 예시 해석
   - xcopy /s /y  /exclude:exclude_list.txt ".\Project\Engine\*.h" ".\External\Include\Engine"
    1) xcopy /s /y 
       -> 하위 폴더까지 xcopy하고, 덮어쓸까요 질문 하지않기.
    2) /exclude:exclude_list.txt 
       -> exclude_list.txt 파일에 적혀있는 파일들은 xcopy 명령을 수행하지 않는다 (== 여기 적힌 애들은 복사작업 안하겠다.)
    3) ".\Project\Engine\*.h"
       -> . (dot한개)는 현재자신의 파일경로를,
          ..(dot두개)는 부모디렉터리의 파일경로를 뜻한다.
          \ (역슬래시딸랑하나) 기호가 단독으로 사용되면 루트 디렉터리의 파일경로를 뜻한다.
          ~ 홈디렉터리(로그인 사용자가 사용할 수 있는 디렉터리) 의 파일경로를 뜻한다. 
          * (Asterist, 애스터리스크)는 여러 파일 및 디렉터리와 일치하는 경로 또는 특정패턴을 지정하는데 사용하는 문자.
          https://hoon93.tistory.com/59


 - 실제 프로젝트에 적용된 방법

  1) 솔루션 파일이 있는 경로에 
     EnginCopy.txt 파일을 만든다

  2) 파일 내용을 아래와 같이 적는다.
     xcopy /s /y  /exclude:exclude_list.txt ".\Project\Engine\*.h" ".\External\Include\Engine"
     이라고 적고 
     파일 확장자를 .bat으로 변경한다.

  3) exclude_list.txt 파일을 만들고
 
     targetver.h
     pch.h
     framework.h
 
     라고 적고 저장한다.

  4) EnginCopy.bat 배치파일을 실행하고
     Project>Engine 경로에 있는 .h 헤더파일들이 External>include>Engine 폴더로 옳겨진걸 확인한다.


======================================================================================================

 [ 솔루션 및 프로젝트 설정 ]

 <0> 매크로란?
  - 솔루션을 구성할때, 경로를 명확하게 기술하는대신, 시스템 환경이 바뀌더라도 유동적으로 경로가 바뀌도록 지정한 키워드. 
  - $(SolutionDir) : 솔루션폴더(.sln)가 있는 경로
  - $(Platform) : 운영체제 버전. 64비트 운영체제는 x64폴더가 생긴다.
                  빌드하면 프로젝트 파일 내부에 x64라는 폴더가 생긴다.
  - $(Configuration) : 빌드 형식을 말한다. Debug모드 일때는 Debug 파일을, Release 모드는 Release 파일을 만든다.
  - $(ExternalIncludePath)
    $(LibraryPath)
    - 윈도우나 비주얼 스튜디오에서 쓰는 기본적인 외부라이브러리. 매크로 탐색 해보면 ; 이 기호로 구분하면서
      꽤 많은 파일경로가 주르륵 나온다.

 <1> 프로젝트 종속성 설정
  - 솔루션 탐색기에 보이는 아무 프로젝트에 오른클릭> 빌드 종속성(B) > 프로젝트 종속성(S)를 클릭
  - 프로젝트(R)에서 모든 프로젝트 각각 종속성 설정실시

 <2> Client 프로젝트
  1) 구성속성 > 일반 > 출력디렉터리
     - $(SolutionDir)OutputFile\bin\
     - exe파일이 생기는 경로
  2) 구성속성 > 일반 > 대상이름
     - 릴리즈 모드일땐 건들지 않는데 디버그 모드일떈 뒤에 _d 붙여줌 => $(ProjectName)_d  
     - 출력 디렉터리(exe파일) 및 중간 디렉터리 결과물에 이름이 어떻게 나올지 설정.
  3) 구성속성 > 일반 > 구성형식 
     - 애플리케이션(.exe)

  바꿧는지 모름) 
  )) 구성속성 > 일반 > Windows SDK 버전
     -10.0(최근 설치된 버전)
  )) 구성속성 > 일반 > 플랫폼 도구 집합
     - Visual Studio 2022 (v143)

  TortoiseSVN 문제인지 상위버전으로 자동설정 안되는지 모름. 선생님께 질문해야함
  )) 구성속성 > 일반 > c++ 언어표준
     - ISO C++20 표준(/std:c++20)
     - 기본값(ISO C++ 14 표준) 으로 되어있었는데 내 기억으론 분명이 constexpr 키워드 할때 바꾼걸로 기억.. 근데 체크아웃해도 
       안바껴있었다. 확실하지 않다.

  4) 구성속성 > 고급 > 디버그 라이브러리 사용
     - 예
  5) 구성속성 > 고급 > Unity(JUMBO) 빌드 사용
     - 예
     - https://netmarble.engineering/unity-build-can-pump-up-build-speed/
  6) 구성속성 > 고급 > 문자 집합
     - 유니코드 문자 집합 사용

  7) 구성속성 > 디버깅 > 작업 디렉터리
     - exe파일이 위치한 경로
     - 이게 비어있으면 프로젝트 파일이 존재하는 소스폴더가 기본 작업 디렉토리로 설정됨.
     -   (참고로 여기서 설정한 작업 디렉터리 경로가 include "" 쌍따옴표 문법의 기준이 되는 경로임.)

  8) 구성속성 > VC++ 디렉터리 > 외부 include 디렉터리
     - 프로젝트가 헤더파일을 include<> 할때 기준이 되는 경로. 꺾쇠 <>를 쓰는 include 문법의 기준이 되는 경로.
     - $(SolutionDir)External\Include\;$(ExternalIncludePath)
  9) 구성속성 > VC++ 디렉터리 > 라이브러리 디렉터리
     - 외부 라이브러리 파일을 참조할때 기준이 되는 경로.
     - $(SolutionDir)External\Library\;$(LibraryPath)
    
  바꿧는지 모름) 
  )) 구성속성 > C/C++ > 일반 > 경고 수준
     - 수준3(/W3)
  )) 구성속성 > C/C++ > 일반 > SDL 검사
     - 예(/sdl)
  )) 구성속성 > C/C++ > 전처리기 > 전처리기 정의
     - _DEBUG;_WINDOWS;%(PreprocessorDefinitions)

  10) 구성속성 > C/C++ > 미리컴파일된 헤더 > 미리 컴파일된 헤더
     - 구성(C)기 Release 일때만 만들기, Debug는  사용(/Yu)
     -?> 왜 엔진이나 스크립트 프로젝트는 무조건 사용이던데 클라이언트, 그것도 Release 모드 일때만 만들기일까?
  11) 구성속성 > C/C++ > 미리컴파일된 헤더 > 미리 컴파일된 헤더 파일
      - pch.h
      - 기본 파일은 stdafx.h 등이다. 굳이 그대로 쓸필요없이 이름 바꿔써준것.
  12) 구성속성 > C/C++ > Unity 빌드 > Unity 파일의 최소 소스 수
      - 10
  13) 구성속성 > C/C++ > Unity 빌드 > Unity 파일의 최대 소스 수
      - 20
  14) 구성속성 > C/C++ > Unity 빌드 > Unity 파일 디렉터리
      - $(ProjectDir)
      - 프로젝트 폴더 내부에 unity_어쩌구.cpp 이런게 여러개 보일것이다. 이게 유니티 빌드 설정해서 나온 파일들이다.

  15) 구성속성 > 링커 > 시스템 > 하위 시스템
      - 창(/SUBSYSTEM:WINDOWS)
      - (참고 - 구성 형식을 애플리케이션이 아닌 정적 라이브러리(.lib)로 설정했으면 애초에 링커 옵션이 안나옴)
     
------------------------------------------

  <3> Engine 프로젝트
   - Client와 비슷 해서 다른 중요한 것만 기술
   
   1) 구성속성 > 일반 > 출력디렉터리
     - $(SolutionDir)External\Library\Engine\
   
   2) 구성 속성 > 빌드 이벤트 > 빌드 전 이벤트 > 명령줄
     - cd $(SolutionDir)
       call EngineCopy.bat
     - 이게 편집창이 아니라 그냥 봤을땐 1줄로 되어있는데 편집 창에서 
       꼭 엔터키 쳐서 두줄로 분리해서 설정해줘야 했던게 중요했던걸로 기억. 진짠지 확인필요
     - .bat 파일을 빌드전에 수행시켜서 프로젝트 폴더가 아닌 Extern 폴더에 Engine의 헤더파일들을 복사 시켜놓은것.

   <4> Script 프로젝트

    1) 구성속성 > 일반 > 출력디렉터리
     - $(SolutionDir)External\Library\Scripts\

    2) 구성 속성 > 빌드 이벤트 > 빌드 전 이벤트 > 명령줄
     - cd $(SolutionDir)
       call ScriptsCopy.bat
       cd $(SolutionDir)CodeGen\
       call CodeGen.exe
     - call ScriptsCopy.bat -> 스크립트 파일의 헤더파일을 역시 Extern 폴더에 복사하는 .bat파일
       exclude_list를 엔진프로젝트와 같이 쓰고있음. 
     - call CodeGen.exe -> 스크립트 추가시 필요한 작업들을 자동으로 수행시켜주는 파일인데 공부해야함..





          
          
           